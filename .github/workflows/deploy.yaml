name: Deploy
on:
  workflow_dispatch:
    inputs:
      aws-env:
        description: "AWS Elastice Beanstalk Environment"
        required: true
        default: "gh-action-staging"
        type: string
      github-env:
        description: "Github Environment"
        required: true
        default: "staging"
        type: string
  workflow_call:
    inputs:
      aws-env:
        description: "AWS Elastice Beanstalk Environment"
        required: true
        default: "gh-action-staging"
        type: string
      github-env:
        description: "Github Environment"
        required: true
        default: "staging"
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.aws-env }}-${{ inputs.github-env }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: $(( inputs.github-env ))
      url: "http://${{ steps.get-env-cname.outputs.aws_env_cname }}"
    steps:
      - name: Avoid deploying to production using a none production env
        if: inputs.aws-env == vars.AWS_EB_PRODUCTION_ENV && inputs.github-env != 'production'
        run: |
          echo "::error::Cannot deploy to production using a non production environment"
          exit 1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_ID }}
          aws-region: ${{ vars.AWS_RIGION }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node Environment
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "npm"

      - name: NPM Dependancy Install
        run: npm ci

      - name: Bulid App
        run: npm run build
        env:
          FLAGSMITH_KEY: ${{ env.FLAGSMITH_KEY }}

      - uses: actions/cache@v3
        with:
          path: "~/.cache/pip"
          key: ${{ runner.os }}-pip
      - name: Install EB CLI
        id: install-eb-cli
        run: pip install awsebcli

      - name: Get AWS ENV Name
        id: get-env-name
        run: echo "aws_env=$(aws elasticbeanstalk describe-environments --profile gh-action-demo --application-name ${{ vars.AWS_EB_APP_NAME }} --environment-names ${{ inputs.aws-env }} --query "Environments[0].EnvironmentName" --output text)" >> $GIHTUB_OUTPUT

      - name: Get AWS ENV Status
        id: get-env-status
        run: echo "aws_env_status=$(aws elasticbeanstalk describe-environments --profile gh-action-demo --application-name ${{ vars.AWS_EB_APP_NAME }} --environment-names ${{ inputs.aws-env }} --query "Environments[0].Status" --output text)" >> $GIHTUB_OUTPUT

      - name: Initialize EB
        run: eb init ${{ vars.AWS_EB_APP_NAME }} --platform ${{ vars.AWS_EB_PLATFORM }} --rigion ${{ vars.AWS_REGION}}

      - name: Create a New Environment
        if: steps.get-env-name.outputs.aws_env == 'None' || steps.get-env-status.outputs.aws_env_status == 'Terminated'
        run: eb create ${{ inputs.aws-env }} --instance-types ${{ vars.AWS_EB_INSTANCE_TYPES }} --cname ${{ inputs.aws-env }} --envvars FLAGSMITH_KEY=${{ secrets.FLAGSMITH_KEY }}

      - name: Deploy if Environment Existws
        if: steps.get-env-name.outputs.aws_env == inputs.aws-env && steps.get-env-status.outputs.aws_env_status != 'Terminated'
        run: eb deploy ${{ inputs.aws-env }}

      - name: Get AWS ENV CNAME
        id: get-env-cname
        run: echo "aws_env_cname=$(aws elasticbeanstalk describe-environments --profile gh-action-demo --application-name ${{ vars.AWS_EB_APP_NAME }} --environment-names ${{ inputs.aws-env }} --query "Environments[0].CNAME" --output text)" >> $GIHTUB_OUTPUT

      - name: Abort if Cancelled
        if: cancelled() && steps.install-eb-cli.conclusion == 'success'
        run: eb abort ${{ inputs.aws-env }}
